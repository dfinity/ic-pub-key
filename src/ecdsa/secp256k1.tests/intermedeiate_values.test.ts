import { describe, expect, it } from 'vitest';
import { ChainCode, DerivationPath } from '../secp256k1';

interface CkdTestVector {
	idx: Uint8Array;
	input: Uint8Array;
	chain_code: ChainCode;
	expected_chain_code: ChainCode;
	expected_scalar: BigInt;
}

const testVectors: CkdTestVector[] = [
	{
		idx: new Uint8Array([0x32]),
		input: new Uint8Array([
			0x2, 0xb8, 0x4f, 0xf3, 0xf8, 0x83, 0x29, 0xa8, 0x87, 0x65, 0x7d, 0x03, 0x09, 0xbd, 0x1a, 0x1a,
			0xf9, 0xe3, 0x76, 0x01, 0xe5, 0xd1, 0xa5, 0x35, 0xd6, 0xfe, 0x7d, 0x42, 0xe3, 0x7f, 0x79,
			0xf4, 0x0a
		]),
		chain_code: new ChainCode(
			new Uint8Array([
				0x21, 0x28, 0x91, 0xbc, 0x03, 0x2f, 0x28, 0xd3, 0x69, 0xba, 0xcf, 0x39, 0xdc, 0x36, 0x9f,
				0xeb, 0x51, 0x6e, 0xce, 0xd9, 0xa3, 0xd8, 0x34, 0x98, 0x24, 0x6a, 0xea, 0xd1, 0x54, 0x6f,
				0x8c, 0xd1
			])
		),
		expected_chain_code: new ChainCode(
			new Uint8Array([
				0xd3, 0xb4, 0x33, 0x95, 0x24, 0x0d, 0x28, 0xd1, 0x5c, 0x96, 0x4e, 0xea, 0x25, 0x33, 0x5f,
				0x14, 0xa8, 0x50, 0x34, 0x08, 0xa4, 0xdb, 0x7f, 0x43, 0xe0, 0x64, 0xf2, 0x21, 0xbb, 0xe2,
				0x55, 0x38
			])
		),
		expected_scalar: BigInt('0x836D7173E13272F2E7D24D16769A6F10C98B895D5F2197AD69BE29E076A4ABB8')
	},
	{
		idx: new Uint8Array([0x34, 0x34, 0x34]),
		input: new Uint8Array([
			0x02, 0x94, 0xec, 0x90, 0x89, 0xb5, 0x3c, 0x8d, 0x93, 0x7c, 0xfb, 0x18, 0xcc, 0xdb, 0x4e,
			0x9f, 0x39, 0xdc, 0xf2, 0xfa, 0xe8, 0x7e, 0xb2, 0x4d, 0xeb, 0x81, 0x43, 0xbc, 0xb2, 0x16,
			0x81, 0x50, 0xd9
		]),
		chain_code: new ChainCode(
			new Uint8Array([
				0xd3, 0xb4, 0x33, 0x95, 0x24, 0x0d, 0x28, 0xd1, 0x5c, 0x96, 0x4e, 0xea, 0x25, 0x33, 0x5f,
				0x14, 0xa8, 0x50, 0x34, 0x08, 0xa4, 0xdb, 0x7f, 0x43, 0xe0, 0x64, 0xf2, 0x21, 0xbb, 0xe2,
				0x55, 0x38
			])
		),
		expected_chain_code: new ChainCode(
			new Uint8Array([
				0x69, 0x9d, 0xd6, 0xe5, 0x31, 0xb1, 0x50, 0x00, 0xdd, 0xb1, 0xdd, 0xb5, 0x22, 0x31, 0x54,
				0x26, 0x96, 0xa3, 0xe1, 0x1b, 0x7e, 0x2c, 0xb3, 0xfe, 0xf5, 0x4e, 0xcb, 0x0c, 0x8f, 0x96,
				0xff, 0x61
			])
		),
		expected_scalar: BigInt('0x76AC3EA7B3C895B438CD96B3FBE084126DB92E66C090562D6748BB77546E7115')
	}
];

describe('DerivationPath', () => {
	describe('ckd', () => {
		it('should return values matching rust', () => {
			for (const testVector of testVectors) {
				let [derived_chain_code, derived_scalar] = DerivationPath.ckd(
					testVector.idx,
					testVector.input,
					testVector.chain_code
				);
				expect(derived_chain_code.asHex()).toBe(testVector.expected_chain_code.asHex());
				expect(derived_scalar.toString()).toBe(testVector.expected_scalar.toString());
			}
		});
	});
});
